openapi: 3.0.0
info:
  title: 상품 등록 API
  description: "이미지와 함께 상품 정보를 등록하는 API"
  version: 1.0.0

paths:
  /item/item:
    get:
      summary: "전체 상품 조회"
      description: >
        카테고리(`categoryId`), 지역(`regionId`), 거래 상태(`status`)를 기준으로 상품을 필터링하여 조회합니다.
        각 상품에는 대표 이미지가 포함됩니다.  
        **sortBy** 파라미터를 통해 최신순(`latest`) 또는 인기순(`popular`)으로 정렬할 수 있습니다.
      parameters:
        - name: categoryId
          in: query
          description: "필터링할 카테고리 ID (0이면 전체 조회)"
          required: false
          schema:
            type: integer
        - name: regionId
          in: query
          description: "필터링할 지역 ID (0이면 전체 조회)"
          required: false
          schema:
            type: integer
        - name: status
          in: query
          description: "거래 상태 필터 (available = 거래 가능, completed = 거래 완료)"
          required: false
          schema:
            type: string
            enum: [available, completed]
        - name: sortBy
          in: query
          description: "정렬 기준 (latest=최신순, popular=인기순)"
          required: false
          schema:
            type: string
            enum: [latest, popular]
            default: "latest"
      responses:
        "200":
          description: "성공적으로 상품 목록을 조회함"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Item"
        "400":
          description: "잘못된 요청 (쿼리 파라미터 오류 등)"
        "500":
          description: "서버 오류"

  /item/{itemId}:
    get:
      summary: "특정 상품 조회"
      description: "상품 ID를 기반으로 특정 상품의 상세 정보를 조회합니다."
      parameters:
        - name: itemId
          in: path
          required: true
          description: "조회할 상품의 ID"
          schema:
            type: integer
      responses:
        "200":
          description: "상품 상세 조회 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/Item"
        "400":
          description: "잘못된 요청 (itemId가 숫자가 아님)"
        "404":
          description: "상품을 찾을 수 없음"
        "500":
          description: "서버 오류"
    patch:
      summary: "상품 수정"
      description: "상품 정보를 수정합니다. 이미지 업데이트 및 지도 정보(placeName 포함) 수정 가능."
      parameters:
        - name: itemId
          in: path
          required: true
          description: "수정할 상품의 ID"
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: "업로드할 이미지 파일 (다중 업로드 가능)"
                  example: []
                categoryId:
                  type: integer
                  example: 1
                title:
                  type: string
                  example: "수정된 상품 제목"
                price:
                  type: integer
                  example: 2500000
                detail:
                  type: string
                  example: "수정된 상세 설명"
                itemStatus:
                  type: string
                  example: "중"
                latitude:
                  type: number
                  format: float
                  example: 37.5665
                longitude:
                  type: number
                  format: float
                  example: 126.9780
                placeName:
                  type: string
                  example: "삼성전자 서초사옥"
      responses:
        "200":
          description: "상품 수정 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "상품이 성공적으로 수정되었습니다."
                  data:
                    $ref: "#/components/schemas/Item"
        "400":
          description: "잘못된 요청"
        "403":
          description: "수정 권한 없음"
        "404":
          description: "상품을 찾을 수 없음"
        "500":
          description: "서버 오류"
    delete:
      summary: "상품 삭제"
      description: "등록된 상품을 삭제합니다. 판매자 권한 확인 필요."
      parameters:
        - name: itemId
          in: path
          required: true
          description: "삭제할 상품의 ID"
          schema:
            type: integer
      responses:
        "200":
          description: "상품 삭제 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "상품이 성공적으로 삭제되었습니다."
        "403":
          description: "삭제 권한이 없는 경우"
        "404":
          description: "상품을 찾을 수 없음"
        "500":
          description: "서버 오류"

  /item/addItem:
    post:
      summary: "상품 등록"
      description: "이미지와 함께 상품 정보를 등록합니다."
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: "업로드할 이미지 파일 (다중 업로드 가능)"
                  example: []
                categoryId:
                  type: integer
                  example: 1
                title:
                  type: string
                  example: "맥북 프로 16인치 팝니다"
                  description: "상품 제목"
                price:
                  type: integer
                  example: 2000000
                detail:
                  type: string
                  example: "최신 모델로, 상태가 매우 좋으며 모든 부속품 포함"
                itemStatus:
                  type: string
                  example: "중"
                latitude:
                  type: number
                  format: float
                  example: 37.5665
                longitude:
                  type: number
                  format: float
                  example: 126.9780
                placeName:
                  type: string
                  example: "삼성전자 서초사옥"
      responses:
        "201":
          description: "상품 등록 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "상품이 성공적으로 등록되었습니다."
        "400":
          description: "잘못된 요청"
        "500":
          description: "서버 오류"

  /item/favorites/{itemId}:
    delete:
      summary: "상품 찜 취소"
      description: "사용자가 특정 상품을 찜 목록에서 제거합니다."
      parameters:
        - name: itemId
          in: path
          required: true
          description: "찜을 취소할 상품의 ID"
          schema:
            type: integer
      responses:
        "200":
          description: "찜 취소 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "찜한 상품이 취소되었습니다."
        "400":
          description: "잘못된 요청 (필수값 없음)"
        "404":
          description: "찜한 상품이 존재하지 않음"
        "500":
          description: "서버 오류"

components:
  schemas:
    Item:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: integer
          example: 101
        title:
          type: string
          example: "새로운 상품"
        price:
          type: integer
          example: 50000
        status:
          type: string
          example: "available"
        detail:
          type: string
          example: "상품 상세 설명"
        itemStatus:
          type: string
          example: "new"
        category:
          type: object
          properties:
            category:
              type: string
              example: "전자제품"
        region:
          type: object
          properties:
            province:
              type: string
              example: "서울특별시"
            district:
              type: string
              example: "강남구"
        map:
          type: object
          properties:
            address:
              type: string
              example: "서울특별시 강남구 테헤란로 521"
            road_address:
              type: string
              example: "서울특별시 강남구 테헤란로 521 (삼성전자 서초사옥)"
            placeName:
              type: string
              example: "삼성전자 서초사옥"
        imageUrl:
          type: string
          example: "https://example.com/image.jpg"
